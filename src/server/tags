!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CHANNELS_FILENAME	include/server.h	13;"	d
CONFIG_FILENAME	include/server.h	10;"	d
Channel	include/server.h	/^} Channel;$/;"	t	typeref:struct:_Channel
Channel_add_member	channel.c	/^void Channel_add_member(Channel * this, User * user)$/;"	f	signature:(Channel * this, User * user)
Channel_add_member	include/server.h	/^void Channel_add_member(Channel * this, User *);$/;"	p	signature:(Channel * this, User *)
Channel_alloc	channel.c	/^Channel *Channel_alloc(const char *name)$/;"	f	signature:(const char *name)
Channel_alloc	include/server.h	/^Channel *Channel_alloc(const char *name);$/;"	p	signature:(const char *name)
Channel_free	channel.c	/^void Channel_free(Channel * this)$/;"	f	signature:(Channel * this)
Channel_free	include/server.h	/^void Channel_free(Channel * this);$/;"	p	signature:(Channel * this)
Channel_has_member	channel.c	/^bool Channel_has_member(Channel * this, User * user)$/;"	f	signature:(Channel * this, User * user)
Channel_has_member	include/server.h	/^bool Channel_has_member(Channel * this, User *);$/;"	p	signature:(Channel * this, User *)
Channel_remove_member	channel.c	/^bool Channel_remove_member(Channel * this, User * user)$/;"	f	signature:(Channel * this, User * user)
Channel_remove_member	include/server.h	/^bool Channel_remove_member(Channel * this, User *);$/;"	p	signature:(Channel * this, User *)
Connection	include/server.h	/^} Connection;$/;"	t	typeref:struct:_Connection
Connection_alloc	connection.c	/^Connection *Connection_alloc(int fd, struct sockaddr *addr,$/;"	f	signature:(int fd, struct sockaddr *addr, socklen_t addrlen)
Connection_alloc	include/server.h	/^Connection *Connection_alloc(int fd, struct sockaddr *addr,$/;"	p	signature:(int fd, struct sockaddr *addr, socklen_t addrlen)
Connection_free	connection.c	/^void Connection_free(Connection * this)$/;"	f	signature:(Connection * this)
Connection_free	include/server.h	/^void Connection_free(Connection * this);$/;"	p	signature:(Connection * this)
Connection_read	connection.c	/^ssize_t Connection_read(Connection * this)$/;"	f	signature:(Connection * this)
Connection_read	include/server.h	/^ssize_t Connection_read(Connection *);$/;"	p	signature:(Connection *)
Connection_write	connection.c	/^ssize_t Connection_write(Connection * this)$/;"	f	signature:(Connection * this)
Connection_write	include/server.h	/^ssize_t Connection_write(Connection *);$/;"	p	signature:(Connection *)
DEFAULT_INFO	include/server.h	14;"	d
ERR_ALREADYREGISTRED_MSG	include/replies.h	118;"	d
ERR_BADCHANNELKEY_MSG	include/replies.h	127;"	d
ERR_BANNEDFROMCHAN_MSG	include/replies.h	126;"	d
ERR_CANNOTSENDTOCHAN_MSG	include/replies.h	93;"	d
ERR_CANTKILLSERVER_MSG	include/replies.h	135;"	d
ERR_CHANNELISFULL_MSG	include/replies.h	120;"	d
ERR_CHANOPPRIVTOOLOW_MSG	include/replies.h	133;"	d
ERR_CHANOPRIVSNEEDED_MSG	include/replies.h	132;"	d
ERR_ERRONEUSNICKNAME_MSG	include/replies.h	105;"	d
ERR_FORBIDDENNICKNAME_MSG	include/replies.h	107;"	d
ERR_INVALIDCAP_MSG	include/replies.h	98;"	d
ERR_INVALIDMODEPARAM_MSG	include/replies.h	148;"	d
ERR_INVITEONLYCHAN_MSG	include/replies.h	125;"	d
ERR_KICKDENY_MSG	include/replies.h	134;"	d
ERR_LISTFULL_MSG	include/replies.h	130;"	d
ERR_NEEDMOREPARAMS_MSG	include/replies.h	117;"	d
ERR_NEEDREGGEDNICK_MSG	include/replies.h	129;"	d
ERR_NICKNAMEINUSE_MSG	include/replies.h	108;"	d
ERR_NICKNAMETOOLONG_MSG	include/replies.h	106;"	d
ERR_NICKREGISTER_MSG	include/replies.h	137;"	d
ERR_NOCHANMODES_MSG	include/replies.h	128;"	d
ERR_NOINVITE_MSG	include/replies.h	146;"	d
ERR_NOMOTD_MSG	include/replies.h	103;"	d
ERR_NONICKCHANGE_MSG	include/replies.h	114;"	d
ERR_NONICKNAMEGIVEN_MSG	include/replies.h	104;"	d
ERR_NONONREG_MSG	include/replies.h	138;"	d
ERR_NOOPERHOST_MSG	include/replies.h	139;"	d
ERR_NOORIGIN_MSG	include/replies.h	97;"	d
ERR_NOPRIVILEGES_MSG	include/replies.h	131;"	d
ERR_NORECIPIENT_MSG	include/replies.h	99;"	d
ERR_NOSUCHCHANNEL_MSG	include/replies.h	92;"	d
ERR_NOSUCHNICK_MSG	include/replies.h	90;"	d
ERR_NOSUCHSERVER_MSG	include/replies.h	91;"	d
ERR_NOTEXTTOSEND_MSG	include/replies.h	100;"	d
ERR_NOTONCHANNEL_MSG	include/replies.h	110;"	d
ERR_NOTONSAMECHANNEL_MSG	include/replies.h	140;"	d
ERR_NOTREGISTEREDSERVER_MSG	include/replies.h	116;"	d
ERR_NOTREGISTERED_MSG	include/replies.h	115;"	d
ERR_OPONLYCHANNEL_MSG	include/replies.h	122;"	d
ERR_PASSWDMISMATCH_MSG	include/replies.h	119;"	d
ERR_REGONLYCHANNEL_MSG	include/replies.h	123;"	d
ERR_RESTRICTED_MSG	include/replies.h	136;"	d
ERR_SECURECHANNEL_MSG	include/replies.h	121;"	d
ERR_SUMMONDISABLED_MSG	include/replies.h	112;"	d
ERR_TOOMANYCHANNELS_MSG	include/replies.h	94;"	d
ERR_TOOMANYTARGETS_MSG	include/replies.h	96;"	d
ERR_UMODEUNKNOWNFLAG2_MSG	include/replies.h	143;"	d
ERR_UMODEUNKNOWNFLAG_MSG	include/replies.h	142;"	d
ERR_UNKNOWNCOMMAND_MSG	include/replies.h	102;"	d
ERR_UNKNOWNMODE_MSG	include/replies.h	124;"	d
ERR_USERNOTINCHANNEL_MSG	include/replies.h	109;"	d
ERR_USERNOTONSERV_MSG	include/replies.h	145;"	d
ERR_USERONCHANNEL_MSG	include/replies.h	111;"	d
ERR_USERSDISABLED_MSG	include/replies.h	113;"	d
ERR_USERSDONTMATCH_MSG	include/replies.h	144;"	d
ERR_WASNOSUCHNICK_MSG	include/replies.h	95;"	d
ERR_WILDTOPLEVEL_MSG	include/replies.h	101;"	d
MAX_CHANNEL_COUNT	include/server.h	11;"	d
MAX_CHANNEL_USERS	include/server.h	12;"	d
MOTD_FILENAME	include/server.h	9;"	d
PEER_CONNECTION	include/server.h	/^    PEER_CONNECTION$/;"	e	enum:_conn_type_t
Peer	include/server.h	/^} Peer;$/;"	t	typeref:struct:_Peer
PeerRequestHandler	server.c	/^} PeerRequestHandler;$/;"	t	typeref:struct:_PeerRequestHandler	file:
Peer_alloc	include/server.h	/^Peer *Peer_alloc();$/;"	p	signature:()
Peer_alloc	peer.c	/^Peer *Peer_alloc()$/;"	f
Peer_free	include/server.h	/^void Peer_free(Peer *);$/;"	p	signature:(Peer *)
Peer_free	peer.c	/^void Peer_free(Peer * this)$/;"	f	signature:(Peer * this)
RPL_ADMINEMAIL_MSG	include/replies.h	30;"	d
RPL_ADMINLOC1_MSG	include/replies.h	28;"	d
RPL_ADMINLOC2_MSG	include/replies.h	29;"	d
RPL_ADMINME_MSG	include/replies.h	27;"	d
RPL_AWAY_MSG	include/replies.h	38;"	d
RPL_BANLIST_MSG	include/replies.h	74;"	d
RPL_CHANNELMODEIS_MSG	include/replies.h	56;"	d
RPL_CREATED_MSG	include/replies.h	5;"	d
RPL_CREATIONTIME_MSG	include/replies.h	57;"	d
RPL_ENDOFBANLIST_MSG	include/replies.h	75;"	d
RPL_ENDOFEXCEPTLIST_MSG	include/replies.h	67;"	d
RPL_ENDOFINFO_MSG	include/replies.h	78;"	d
RPL_ENDOFINVITELIST_MSG	include/replies.h	65;"	d
RPL_ENDOFLINKS_MSG	include/replies.h	72;"	d
RPL_ENDOFMOTD_MSG	include/replies.h	81;"	d
RPL_ENDOFNAMES_MSG	include/replies.h	73;"	d
RPL_ENDOFSTATS_MSG	include/replies.h	17;"	d
RPL_ENDOFWHOIS_MSG	include/replies.h	51;"	d
RPL_ENDOFWHOWAS_MSG	include/replies.h	76;"	d
RPL_ENDOFWHO_MSG	include/replies.h	49;"	d
RPL_EXCEPTLIST_MSG	include/replies.h	66;"	d
RPL_HOSTHIDDEN_MSG	include/replies.h	88;"	d
RPL_INFO_MSG	include/replies.h	77;"	d
RPL_INVITELIST_MSG	include/replies.h	64;"	d
RPL_INVITING_MSG	include/replies.h	63;"	d
RPL_ISON_MSG	include/replies.h	40;"	d
RPL_ISUPPORT1_MSG	include/replies.h	8;"	d
RPL_ISUPPORT2_MSG	include/replies.h	9;"	d
RPL_ISUPPORTNET_MSG	include/replies.h	7;"	d
RPL_LINKS_MSG	include/replies.h	71;"	d
RPL_LISTEND_MSG	include/replies.h	55;"	d
RPL_LISTSTART_MSG	include/replies.h	53;"	d
RPL_LIST_MSG	include/replies.h	54;"	d
RPL_LOCALUSERS_MSG	include/replies.h	32;"	d
RPL_LUSERCHANNELS_MSG	include/replies.h	25;"	d
RPL_LUSERCLIENT_MSG	include/replies.h	22;"	d
RPL_LUSERME_MSG	include/replies.h	26;"	d
RPL_LUSEROP_MSG	include/replies.h	23;"	d
RPL_LUSERUNKNOWN_MSG	include/replies.h	24;"	d
RPL_MOTDSTART_MSG	include/replies.h	80;"	d
RPL_MOTD_MSG	include/replies.h	79;"	d
RPL_MYINFO_MSG	include/replies.h	6;"	d
RPL_NAMREPLY_MSG	include/replies.h	70;"	d
RPL_NETUSERS_MSG	include/replies.h	33;"	d
RPL_NOTOPIC_MSG	include/replies.h	59;"	d
RPL_NOWAWAY_MSG	include/replies.h	42;"	d
RPL_REHASHING_MSG	include/replies.h	85;"	d
RPL_SERVLISTEND_MSG	include/replies.h	20;"	d
RPL_SERVLIST_MSG	include/replies.h	19;"	d
RPL_STATSCOMMANDS_MSG	include/replies.h	15;"	d
RPL_STATSCONN_MSG	include/replies.h	34;"	d
RPL_STATSLINKINFO_MSG	include/replies.h	14;"	d
RPL_STATSUPTIME	include/replies.h	21;"	d
RPL_STATSXLINE_MSG	include/replies.h	16;"	d
RPL_TIME_MSG	include/replies.h	87;"	d
RPL_TOPICSETBY_MSG	include/replies.h	61;"	d
RPL_TOPIC_MSG	include/replies.h	60;"	d
RPL_TRACEEND_MSG	include/replies.h	31;"	d
RPL_TRACELINK_MSG	include/replies.h	11;"	d
RPL_TRACEOPERATOR_MSG	include/replies.h	12;"	d
RPL_TRACESERVER_MSG	include/replies.h	13;"	d
RPL_UMODEIS_MSG	include/replies.h	18;"	d
RPL_UNAWAY_MSG	include/replies.h	41;"	d
RPL_USERHOST_MSG	include/replies.h	39;"	d
RPL_VERSION_MSG	include/replies.h	68;"	d
RPL_WELCOME_MSG	include/replies.h	3;"	d
RPL_WHOISBOT_MSG	include/replies.h	62;"	d
RPL_WHOISCERTFP_MSG	include/replies.h	36;"	d
RPL_WHOISCHANNELS_MSG	include/replies.h	52;"	d
RPL_WHOISHOST_MSG	include/replies.h	82;"	d
RPL_WHOISIDLE_MSG	include/replies.h	50;"	d
RPL_WHOISLOGGEDIN_MSG	include/replies.h	58;"	d
RPL_WHOISMODES_MSG	include/replies.h	83;"	d
RPL_WHOISOPERATOR_MSG	include/replies.h	47;"	d
RPL_WHOISREGNICK_MSG	include/replies.h	43;"	d
RPL_WHOISSERVER_MSG	include/replies.h	46;"	d
RPL_WHOISSERVICE_MSG	include/replies.h	44;"	d
RPL_WHOISSSL_MSG	include/replies.h	35;"	d
RPL_WHOISUSER_MSG	include/replies.h	45;"	d
RPL_WHOREPLY_MSG	include/replies.h	69;"	d
RPL_WHOWASUSER_MSG	include/replies.h	48;"	d
RPL_YOUREOPER_MSG	include/replies.h	84;"	d
RPL_YOURESERVICE_MSG	include/replies.h	86;"	d
RPL_YOURHOST_MSG	include/replies.h	4;"	d
Server	include/server.h	/^} Server;$/;"	t	typeref:struct:_Server
Server_accept_all	include/server.h	/^void Server_accept_all(Server * serv);$/;"	p	signature:(Server * serv)
Server_accept_all	server.c	/^void Server_accept_all(Server * serv)$/;"	f	signature:(Server * serv)
Server_add_connection	include/server.h	/^bool Server_add_connection(Server * serv, Connection * connection);$/;"	p	signature:(Server * serv, Connection * connection)
Server_add_connection	server.c	/^bool Server_add_connection(Server * serv, Connection * connection)$/;"	f	signature:(Server * serv, Connection * connection)
Server_add_peer	include/server.h	/^bool Server_add_peer(Server * serv, const char *name, const char *port);$/;"	p	signature:(Server * serv, const char *name, const char *port)
Server_add_peer	server.c	/^bool Server_add_peer(Server * serv, const char *name, const char *port)$/;"	f	signature:(Server * serv, const char *name, const char *port)
Server_create	include/server.h	/^Server *Server_create(const char *name);$/;"	p	signature:(const char *name)
Server_create	server.c	/^Server *Server_create(const char *name)$/;"	f	signature:(const char *name)
Server_create_message	include/server.h	17;"	d
Server_destroy	include/server.h	/^void Server_destroy(Server * serv);$/;"	p	signature:(Server * serv)
Server_destroy	server.c	/^void Server_destroy(Server * serv)$/;"	f	signature:(Server * serv)
Server_flush_message_queues	include/server.h	/^void Server_flush_message_queues(Server * serv);$/;"	p	signature:(Server * serv)
Server_flush_message_queues	server.c	/^void Server_flush_message_queues(Server * serv)$/;"	f	signature:(Server * serv)
Server_handle_CONNECT	include/server.h	/^void Server_handle_CONNECT(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_CONNECT	reply.c	/^void Server_handle_CONNECT(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_HELP	include/server.h	/^void Server_handle_HELP(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_HELP	reply.c	/^void Server_handle_HELP(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_INFO	include/server.h	/^void Server_handle_INFO(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_INFO	reply.c	/^void Server_handle_INFO(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_JOIN	include/server.h	/^void Server_handle_JOIN(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_JOIN	reply.c	/^void Server_handle_JOIN(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_LIST	include/server.h	/^void Server_handle_LIST(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_LIST	reply.c	/^void Server_handle_LIST(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_LUSERS	include/server.h	/^void Server_handle_LUSERS(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_LUSERS	reply.c	/^void Server_handle_LUSERS(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_MOTD	include/server.h	/^void Server_handle_MOTD(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_MOTD	reply.c	/^void Server_handle_MOTD(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_NAMES	include/server.h	/^void Server_handle_NAMES(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_NAMES	reply.c	/^void Server_handle_NAMES(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_NICK	include/server.h	/^void Server_handle_NICK(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_NICK	reply.c	/^void Server_handle_NICK(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_NOTICE	include/server.h	/^void Server_handle_NOTICE(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_NOTICE	reply.c	/^void Server_handle_NOTICE(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_PART	include/server.h	/^void Server_handle_PART(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_PART	reply.c	/^void Server_handle_PART(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_PASS	include/server.h	/^void Server_handle_PASS(Server * serv, Peer * peer, Message * msg);$/;"	p	signature:(Server * serv, Peer * peer, Message * msg)
Server_handle_PASS	reply.c	/^void Server_handle_PASS(Server * serv, Peer * peer, Message * msg)$/;"	f	signature:(Server * serv, Peer * peer, Message * msg)
Server_handle_PING	include/server.h	/^void Server_handle_PING(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_PING	reply.c	/^void Server_handle_PING(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_PRIVMSG	include/server.h	/^void Server_handle_PRIVMSG(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_PRIVMSG	reply.c	/^void Server_handle_PRIVMSG(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_QUIT	include/server.h	/^void Server_handle_QUIT(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_QUIT	reply.c	/^void Server_handle_QUIT(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_SERVER	include/server.h	/^void Server_handle_SERVER(Server * serv, Peer * peer, Message * msg);$/;"	p	signature:(Server * serv, Peer * peer, Message * msg)
Server_handle_SERVER	reply.c	/^void Server_handle_SERVER(Server * serv, Peer * peer, Message * msg)$/;"	f	signature:(Server * serv, Peer * peer, Message * msg)
Server_handle_TOPIC	include/server.h	/^void Server_handle_TOPIC(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_TOPIC	reply.c	/^void Server_handle_TOPIC(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_USER	include/server.h	/^void Server_handle_USER(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_USER	reply.c	/^void Server_handle_USER(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_handle_WHO	include/server.h	/^void Server_handle_WHO(Server * serv, User * usr, Message * msg);$/;"	p	signature:(Server * serv, User * usr, Message * msg)
Server_handle_WHO	reply.c	/^void Server_handle_WHO(Server * serv, User * usr, Message * msg)$/;"	f	signature:(Server * serv, User * usr, Message * msg)
Server_message_channel	include/server.h	/^void Server_message_channel(Server * serv, const char *origin,$/;"	p	signature:(Server * serv, const char *origin, const char *target, const char *message)
Server_message_channel	server.c	/^Server_message_channel(Server * serv, const char *origin,$/;"	f	signature:(Server * serv, const char *origin, const char *target, const char *message)
Server_message_user	include/server.h	/^void Server_message_user(Server * serv, const char *origin,$/;"	p	signature:(Server * serv, const char *origin, const char *target, const char *message)
Server_message_user	server.c	/^Server_message_user(Server * serv, const char *origin, const char *target,$/;"	f	signature:(Server * serv, const char *origin, const char *target, const char *message)
Server_process_request	include/server.h	/^void Server_process_request(Server * serv, Connection * usr);$/;"	p	signature:(Server * serv, Connection * usr)
Server_process_request	server.c	/^void Server_process_request(Server * serv, Connection * conn)$/;"	f	signature:(Server * serv, Connection * conn)
Server_process_request_from_peer	include/server.h	/^void Server_process_request_from_peer(Server * serv, Connection * conn);$/;"	p	signature:(Server * serv, Connection * conn)
Server_process_request_from_peer	server.c	/^void Server_process_request_from_peer(Server * serv, Connection * conn)$/;"	f	signature:(Server * serv, Connection * conn)
Server_process_request_from_unknown	include/server.h	/^void Server_process_request_from_unknown(Server * serv, Connection * conn);$/;"	p	signature:(Server * serv, Connection * conn)
Server_process_request_from_unknown	server.c	/^void Server_process_request_from_unknown(Server * serv, Connection * conn)$/;"	f	signature:(Server * serv, Connection * conn)
Server_process_request_from_user	include/server.h	/^void Server_process_request_from_user(Server * serv, Connection * conn);$/;"	p	signature:(Server * serv, Connection * conn)
Server_process_request_from_user	server.c	/^void Server_process_request_from_user(Server * serv, Connection * conn)$/;"	f	signature:(Server * serv, Connection * conn)
Server_relay_message	include/server.h	/^void Server_relay_message(Server * serv, const char *origin,$/;"	p	signature:(Server * serv, const char *origin, const char *message)
Server_relay_message	server.c	/^Server_relay_message(Server * serv, const char *origin,$/;"	f	signature:(Server * serv, const char *origin, const char *message)
Server_remove_all_connections	server.c	/^void Server_remove_all_connections(Server * serv)$/;"	f	signature:(Server * serv)
Server_remove_connection	include/server.h	/^void Server_remove_connection(Server * serv, Connection * connection);$/;"	p	signature:(Server * serv, Connection * connection)
Server_remove_connection	server.c	/^void Server_remove_connection(Server * serv, Connection * connection)$/;"	f	signature:(Server * serv, Connection * connection)
UNKNOWN_CONNECTION	include/server.h	/^    UNKNOWN_CONNECTION,$/;"	e	enum:_conn_type_t
USER_CONNECTION	include/server.h	/^    USER_CONNECTION,$/;"	e	enum:_conn_type_t
USER_OFFLINE	include/server.h	/^    USER_OFFLINE$/;"	e	enum:__anon1
USER_ONLINE	include/server.h	/^    USER_ONLINE,$/;"	e	enum:__anon1
User	include/server.h	/^} User;$/;"	t	typeref:struct:_User
UserRequestHandler	server.c	/^} UserRequestHandler;$/;"	t	typeref:struct:_UserRequestHandler	file:
User_add_channel	include/server.h	/^void User_add_channel(User * usr, const char *channel_name);$/;"	p	signature:(User * usr, const char *channel_name)
User_add_channel	user.c	/^void User_add_channel(User * usr, const char *channel_name)$/;"	f	signature:(User * usr, const char *channel_name)
User_alloc	include/server.h	/^User *User_alloc();$/;"	p	signature:()
User_alloc	user.c	/^User *User_alloc()$/;"	f
User_create_message	include/server.h	21;"	d
User_free	include/server.h	/^void User_free(User * this);$/;"	p	signature:(User * this)
User_free	user.c	/^void User_free(User * usr)$/;"	f	signature:(User * usr)
User_is_member	include/server.h	/^bool User_is_member(User * usr, const char *channel_name);$/;"	p	signature:(User * usr, const char *channel_name)
User_is_member	user.c	/^bool User_is_member(User * usr, const char *channel_name)$/;"	f	signature:(User * usr, const char *channel_name)
User_remove_channel	include/server.h	/^bool User_remove_channel(User * usr, const char *channel_name);$/;"	p	signature:(User * usr, const char *channel_name)
User_remove_channel	user.c	/^bool User_remove_channel(User * usr, const char *channel_name)$/;"	f	signature:(User * usr, const char *channel_name)
_Channel	include/server.h	/^typedef struct _Channel {$/;"	s
_Channel::members	include/server.h	/^    Hashtable *members;		\/\/ map username to User struct$/;"	m	struct:_Channel	access:public
_Channel::mode	include/server.h	/^    int mode;			\/\/ channel mode$/;"	m	struct:_Channel	access:public
_Channel::name	include/server.h	/^    char *name;			\/\/ name of channel$/;"	m	struct:_Channel	access:public
_Channel::time_created	include/server.h	/^    time_t time_created;	\/\/ time channel was created$/;"	m	struct:_Channel	access:public
_Channel::topic	include/server.h	/^    char *topic;		\/\/ channel topic$/;"	m	struct:_Channel	access:public
_Connection	include/server.h	/^typedef struct _Connection {$/;"	s
_Connection::conn_type	include/server.h	/^    conn_type_t conn_type;$/;"	m	struct:_Connection	access:public
_Connection::data	include/server.h	/^    void *data;			\/\/ additional data for users and peers$/;"	m	struct:_Connection	access:public
_Connection::fd	include/server.h	/^    int fd;$/;"	m	struct:_Connection	access:public
_Connection::hostname	include/server.h	/^    char *hostname;$/;"	m	struct:_Connection	access:public
_Connection::incoming_messages	include/server.h	/^    List *incoming_messages;	\/\/ queue of received messages$/;"	m	struct:_Connection	access:public
_Connection::outgoing_messages	include/server.h	/^    List *outgoing_messages;	\/\/ queue of messages to deliver$/;"	m	struct:_Connection	access:public
_Connection::port	include/server.h	/^    int port;$/;"	m	struct:_Connection	access:public
_Connection::quit	include/server.h	/^    bool quit;$/;"	m	struct:_Connection	access:public
_Connection::req_buf	include/server.h	/^    char req_buf[MAX_MSG_LEN + 1];	\/\/ request buffer$/;"	m	struct:_Connection	access:public
_Connection::req_len	include/server.h	/^    size_t req_len;		\/\/ request buffer length$/;"	m	struct:_Connection	access:public
_Connection::res_buf	include/server.h	/^    char res_buf[MAX_MSG_LEN + 1];	\/\/ response buffer$/;"	m	struct:_Connection	access:public
_Connection::res_len	include/server.h	/^    size_t res_len;		\/\/ response buffer length$/;"	m	struct:_Connection	access:public
_Connection::res_off	include/server.h	/^    size_t res_off;		\/\/ num bytes sent from response buffer$/;"	m	struct:_Connection	access:public
_Peer	include/server.h	/^typedef struct _Peer {$/;"	s
_Peer::channels	include/server.h	/^    Vector *channels;		\/\/ names of channels behind this server$/;"	m	struct:_Peer	access:public
_Peer::msg_queue	include/server.h	/^    List *msg_queue;$/;"	m	struct:_Peer	access:public
_Peer::name	include/server.h	/^    char *name;$/;"	m	struct:_Peer	access:public
_Peer::nicks	include/server.h	/^    Vector *nicks;		\/\/ nick of users behind this server$/;"	m	struct:_Peer	access:public
_Peer::passwd	include/server.h	/^    char *passwd;$/;"	m	struct:_Peer	access:public
_Peer::quit	include/server.h	/^    bool quit;			\/\/ flag to indicate server leaving$/;"	m	struct:_Peer	access:public
_Peer::registered	include/server.h	/^    bool registered;$/;"	m	struct:_Peer	access:public
_PeerRequestHandler	server.c	/^typedef struct _PeerRequestHandler {$/;"	s	file:
_PeerRequestHandler::handler	server.c	/^    void (*handler)(Server *, Peer *, Message *);	\/* request handler function *\/$/;"	m	struct:_PeerRequestHandler	file:	access:public
_PeerRequestHandler::name	server.c	/^    const char *name;		\/* command name *\/$/;"	m	struct:_PeerRequestHandler	file:	access:public
_Server	include/server.h	/^typedef struct _Server {$/;"	s
_Server::channel_to_serv_name_map	include/server.h	/^    Hashtable *channel_to_serv_name_map;	\/\/ Map channel name to name of server$/;"	m	struct:_Server	access:public
_Server::config_file	include/server.h	/^    char *config_file;		\/\/ name of config file with irc server address and$/;"	m	struct:_Server	access:public
_Server::connections	include/server.h	/^    Hashtable *connections;	\/\/ map sock to Connection struct$/;"	m	struct:_Server	access:public
_Server::created_at	include/server.h	/^    char created_at[64];	\/\/ server time created at as string$/;"	m	struct:_Server	access:public
_Server::epollfd	include/server.h	/^    int epollfd;		\/\/ epoll fd$/;"	m	struct:_Server	access:public
_Server::fd	include/server.h	/^    int fd;			\/\/ listen socket$/;"	m	struct:_Server	access:public
_Server::hostname	include/server.h	/^    char *hostname;		\/\/ server hostname$/;"	m	struct:_Server	access:public
_Server::info	include/server.h	/^    char *info;$/;"	m	struct:_Server	access:public
_Server::motd_file	include/server.h	/^    char *motd_file;		\/\/ file to use for message of the day greetings$/;"	m	struct:_Server	access:public
_Server::name	include/server.h	/^    char *name;			\/\/ name of this server$/;"	m	struct:_Server	access:public
_Server::name_to_channel_map	include/server.h	/^    Hashtable *name_to_channel_map;	\/\/ Map channel name to channel struct$/;"	m	struct:_Server	access:public
_Server::name_to_peer_map	include/server.h	/^    Hashtable *name_to_peer_map;	\/\/ Map server name to peer struct$/;"	m	struct:_Server	access:public
_Server::nick_to_serv_name_map	include/server.h	/^    Hashtable *nick_to_serv_name_map;	\/\/ Map nick to name of server which has user$/;"	m	struct:_Server	access:public
_Server::nick_to_user_map	include/server.h	/^    Hashtable *nick_to_user_map;	\/\/ Map nick to user struct on this server$/;"	m	struct:_Server	access:public
_Server::passwd	include/server.h	/^    char *passwd;$/;"	m	struct:_Server	access:public
_Server::port	include/server.h	/^    char *port;			\/\/ server port$/;"	m	struct:_Server	access:public
_Server::servaddr	include/server.h	/^    struct sockaddr_in servaddr;	\/\/ address info for server$/;"	m	struct:_Server	typeref:struct:_Server::sockaddr_in	access:public
_User	include/server.h	/^typedef struct _User {$/;"	s
_User::channels	include/server.h	/^    Vector *channels;		\/\/ list of channels joined by user$/;"	m	struct:_User	access:public
_User::hostname	include/server.h	/^    char *hostname;		\/\/ client ip$/;"	m	struct:_User	access:public
_User::msg_queue	include/server.h	/^    List *msg_queue;$/;"	m	struct:_User	access:public
_User::nick	include/server.h	/^    char *nick;			\/\/ display name$/;"	m	struct:_User	access:public
_User::nick_changed	include/server.h	/^    bool nick_changed;		\/\/ flag to indicate user has set a nick$/;"	m	struct:_User	access:public
_User::quit	include/server.h	/^    bool quit;			\/\/ flag to indicate user is leaving server$/;"	m	struct:_User	access:public
_User::realname	include/server.h	/^    char *realname;		\/\/ full name$/;"	m	struct:_User	access:public
_User::registered	include/server.h	/^    bool registered;		\/\/ flag to indicate user has registered with username,$/;"	m	struct:_User	access:public
_User::status	include/server.h	/^    int status;			\/\/ to indicate if user online or offline$/;"	m	struct:_User	access:public
_User::username	include/server.h	/^    char *username;		\/\/ unique identifier$/;"	m	struct:_User	access:public
_UserRequestHandler	server.c	/^typedef struct _UserRequestHandler {$/;"	s	file:
_UserRequestHandler::handler	server.c	/^    void (*handler)(Server *, User *, Message *);	\/* request handler function *\/$/;"	m	struct:_UserRequestHandler	file:	access:public
_UserRequestHandler::name	server.c	/^    const char *name;		\/* command name *\/$/;"	m	struct:_UserRequestHandler	file:	access:public
_add_channels_to_map	server.c	/^void _add_channels_to_map(Server * serv)$/;"	f	signature:(Server * serv)
_conn_type_t	include/server.h	/^typedef enum _conn_type_t {$/;"	g
body	include/server.h	/^    const char *body;$/;"	m	struct:help_t	access:public
channel_to_serv_name_map	include/server.h	/^    Hashtable *channel_to_serv_name_map;	\/\/ Map channel name to name of server$/;"	m	struct:_Server	access:public
channels	include/server.h	/^    Vector *channels;		\/\/ list of channels joined by user$/;"	m	struct:_User	access:public
channels	include/server.h	/^    Vector *channels;		\/\/ names of channels behind this server$/;"	m	struct:_Peer	access:public
check_peer_registration	reply.c	/^void check_peer_registration(Server * serv, Peer * peer)$/;"	f	signature:(Server * serv, Peer * peer)
check_registered	reply.c	/^bool check_registered(Server * serv, User * usr)$/;"	f	signature:(Server * serv, User * usr)
check_user_registration	reply.c	/^bool check_user_registration(Server * serv, User * usr)$/;"	f	signature:(Server * serv, User * usr)
config_file	include/server.h	/^    char *config_file;		\/\/ name of config file with irc server address and$/;"	m	struct:_Server	access:public
conn_type	include/server.h	/^    conn_type_t conn_type;$/;"	m	struct:_Connection	access:public
conn_type_t	include/server.h	/^} conn_type_t;$/;"	t	typeref:enum:_conn_type_t
connections	include/server.h	/^    Hashtable *connections;	\/\/ map sock to Connection struct$/;"	m	struct:_Server	access:public
created_at	include/server.h	/^    char created_at[64];	\/\/ server time created at as string$/;"	m	struct:_Server	access:public
data	include/server.h	/^    void *data;			\/\/ additional data for users and peers$/;"	m	struct:_Connection	access:public
epollfd	include/server.h	/^    int epollfd;		\/\/ epoll fd$/;"	m	struct:_Server	access:public
fd	include/server.h	/^    int fd;			\/\/ listen socket$/;"	m	struct:_Server	access:public
fd	include/server.h	/^    int fd;$/;"	m	struct:_Connection	access:public
g_alive	main.c	/^static volatile bool g_alive = true;$/;"	v	file:
get_help_text	help.c	/^const struct help_t *get_help_text(const char *subject)$/;"	f	signature:(const char *subject)
get_help_text	include/server.h	/^const struct help_t *get_help_text(const char *subject);$/;"	p	signature:(const char *subject)
get_motd	include/server.h	/^char *get_motd(char *fname);$/;"	p	signature:(char *fname)
get_motd	util.c	/^char *get_motd(char *fname)$/;"	f	signature:(char *fname)
get_peer_info	include/server.h	/^bool get_peer_info(const char *filename, const char *name,$/;"	p	signature:(const char *filename, const char *name, struct peer_info_t *info)
get_peer_info	peer.c	/^get_peer_info(const char *filename, const char *name,$/;"	f	signature:(const char *filename, const char *name, struct peer_info_t *info)
get_server_passwd	include/server.h	/^char *get_server_passwd(const char *config_filename, const char *name);$/;"	p	signature:(const char *config_filename, const char *name)
get_server_passwd	peer.c	/^char *get_server_passwd(const char *config_filename, const char *name)$/;"	f	signature:(const char *config_filename, const char *name)
handler	server.c	/^    void (*handler)(Server *, Peer *, Message *);	\/* request handler function *\/$/;"	m	struct:_PeerRequestHandler	file:	access:public
handler	server.c	/^    void (*handler)(Server *, User *, Message *);	\/* request handler function *\/$/;"	m	struct:_UserRequestHandler	file:	access:public
help	help.c	/^const struct help_t help[] = {$/;"	v	typeref:struct:help_t
help_privmsg	help.c	/^const char help_privmsg[] =$/;"	v
help_t	include/server.h	/^struct help_t {$/;"	s
help_t::body	include/server.h	/^    const char *body;$/;"	m	struct:help_t	access:public
help_t::subject	include/server.h	/^    const char *subject;$/;"	m	struct:help_t	access:public
help_t::title	include/server.h	/^    const char *title;$/;"	m	struct:help_t	access:public
help_who	help.c	/^const char help_who[] =$/;"	v
hostname	include/server.h	/^    char *hostname;		\/\/ client ip$/;"	m	struct:_User	access:public
hostname	include/server.h	/^    char *hostname;		\/\/ server hostname$/;"	m	struct:_Server	access:public
hostname	include/server.h	/^    char *hostname;$/;"	m	struct:_Connection	access:public
incoming_messages	include/server.h	/^    List *incoming_messages;	\/\/ queue of received messages$/;"	m	struct:_Connection	access:public
info	include/server.h	/^    char *info;$/;"	m	struct:_Server	access:public
load_channels	channel.c	/^Hashtable *load_channels(const char *filename)$/;"	f	signature:(const char *filename)
load_channels	include/server.h	/^Hashtable *load_channels(const char *filename);$/;"	p	signature:(const char *filename)
load_peers	include/server.h	/^Hashtable *load_peers(const char *config_filename);$/;"	p	signature:(const char *config_filename)
main	main.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
members	include/server.h	/^    Hashtable *members;		\/\/ map username to User struct$/;"	m	struct:_Channel	access:public
mode	include/server.h	/^    int mode;			\/\/ channel mode$/;"	m	struct:_Channel	access:public
motd_file	include/server.h	/^    char *motd_file;		\/\/ file to use for message of the day greetings$/;"	m	struct:_Server	access:public
msg_queue	include/server.h	/^    List *msg_queue;$/;"	m	struct:_Peer	access:public
msg_queue	include/server.h	/^    List *msg_queue;$/;"	m	struct:_User	access:public
name	include/server.h	/^    char *name;			\/\/ name of channel$/;"	m	struct:_Channel	access:public
name	include/server.h	/^    char *name;			\/\/ name of this server$/;"	m	struct:_Server	access:public
name	include/server.h	/^    char *name;$/;"	m	struct:_Peer	access:public
name	server.c	/^    const char *name;		\/* command name *\/$/;"	m	struct:_PeerRequestHandler	file:	access:public
name	server.c	/^    const char *name;		\/* command name *\/$/;"	m	struct:_UserRequestHandler	file:	access:public
name_to_channel_map	include/server.h	/^    Hashtable *name_to_channel_map;	\/\/ Map channel name to channel struct$/;"	m	struct:_Server	access:public
name_to_peer_map	include/server.h	/^    Hashtable *name_to_peer_map;	\/\/ Map server name to peer struct$/;"	m	struct:_Server	access:public
nick	include/server.h	/^    char *nick;			\/\/ display name$/;"	m	struct:_User	access:public
nick_changed	include/server.h	/^    bool nick_changed;		\/\/ flag to indicate user has set a nick$/;"	m	struct:_User	access:public
nick_to_serv_name_map	include/server.h	/^    Hashtable *nick_to_serv_name_map;	\/\/ Map nick to name of server which has user$/;"	m	struct:_Server	access:public
nick_to_user_map	include/server.h	/^    Hashtable *nick_to_user_map;	\/\/ Map nick to user struct on this server$/;"	m	struct:_Server	access:public
nicks	include/server.h	/^    Vector *nicks;		\/\/ nick of users behind this server$/;"	m	struct:_Peer	access:public
outgoing_messages	include/server.h	/^    List *outgoing_messages;	\/\/ queue of messages to deliver$/;"	m	struct:_Connection	access:public
passwd	include/server.h	/^    char *passwd;$/;"	m	struct:_Peer	access:public
passwd	include/server.h	/^    char *passwd;$/;"	m	struct:_Server	access:public
peer_host	include/server.h	/^    char *peer_host;$/;"	m	struct:peer_info_t	access:public
peer_info_t	include/server.h	/^typedef struct peer_info_t {$/;"	s
peer_info_t	include/server.h	/^} peer_info_t;$/;"	t	typeref:struct:peer_info_t
peer_info_t::peer_host	include/server.h	/^    char *peer_host;$/;"	m	struct:peer_info_t	access:public
peer_info_t::peer_name	include/server.h	/^    char *peer_name;$/;"	m	struct:peer_info_t	access:public
peer_info_t::peer_passwd	include/server.h	/^    char *peer_passwd;$/;"	m	struct:peer_info_t	access:public
peer_info_t::peer_port	include/server.h	/^    char *peer_port;$/;"	m	struct:peer_info_t	access:public
peer_name	include/server.h	/^    char *peer_name;$/;"	m	struct:peer_info_t	access:public
peer_passwd	include/server.h	/^    char *peer_passwd;$/;"	m	struct:peer_info_t	access:public
peer_port	include/server.h	/^    char *peer_port;$/;"	m	struct:peer_info_t	access:public
peer_request_handlers	server.c	/^static PeerRequestHandler peer_request_handlers[] = {$/;"	v	file:
port	include/server.h	/^    char *port;			\/\/ server port$/;"	m	struct:_Server	access:public
port	include/server.h	/^    int port;$/;"	m	struct:_Connection	access:public
quit	include/server.h	/^    bool quit;			\/\/ flag to indicate server leaving$/;"	m	struct:_Peer	access:public
quit	include/server.h	/^    bool quit;			\/\/ flag to indicate user is leaving server$/;"	m	struct:_User	access:public
quit	include/server.h	/^    bool quit;$/;"	m	struct:_Connection	access:public
realname	include/server.h	/^    char *realname;		\/\/ full name$/;"	m	struct:_User	access:public
registered	include/server.h	/^    bool registered;		\/\/ flag to indicate user has registered with username,$/;"	m	struct:_User	access:public
registered	include/server.h	/^    bool registered;$/;"	m	struct:_Peer	access:public
req_buf	include/server.h	/^    char req_buf[MAX_MSG_LEN + 1];	\/\/ request buffer$/;"	m	struct:_Connection	access:public
req_len	include/server.h	/^    size_t req_len;		\/\/ request buffer length$/;"	m	struct:_Connection	access:public
res_buf	include/server.h	/^    char res_buf[MAX_MSG_LEN + 1];	\/\/ response buffer$/;"	m	struct:_Connection	access:public
res_len	include/server.h	/^    size_t res_len;		\/\/ response buffer length$/;"	m	struct:_Connection	access:public
res_off	include/server.h	/^    size_t res_off;		\/\/ num bytes sent from response buffer$/;"	m	struct:_Connection	access:public
save_channels	channel.c	/^void save_channels(Hashtable * hashtable, const char *filename)$/;"	f	signature:(Hashtable * hashtable, const char *filename)
save_channels	include/server.h	/^void save_channels(Hashtable * hashtable, const char *filename);$/;"	p	signature:(Hashtable * hashtable, const char *filename)
send_motd_reply	reply.c	/^void send_motd_reply(Server * serv, User * usr)$/;"	f	signature:(Server * serv, User * usr)
send_names_reply	reply.c	/^void send_names_reply(Server * serv, User * usr, Channel * channel)$/;"	f	signature:(Server * serv, User * usr, Channel * channel)
send_topic_reply	reply.c	/^void send_topic_reply(Server * serv, User * usr, Channel * channel)$/;"	f	signature:(Server * serv, User * usr, Channel * channel)
send_welcome_reply	reply.c	/^void send_welcome_reply(Server * serv, User * usr)$/;"	f	signature:(Server * serv, User * usr)
send_who_reply	reply.c	/^send_who_reply(Server * serv, User * usr, Channel * target_channel,$/;"	f	signature:(Server * serv, User * usr, Channel * target_channel, User * target_usr)
servaddr	include/server.h	/^    struct sockaddr_in servaddr;	\/\/ address info for server$/;"	m	struct:_Server	typeref:struct:_Server::sockaddr_in	access:public
sighandler	main.c	/^void sighandler(int sig)$/;"	f	signature:(int sig)
sighandler	main.c	/^void sighandler(int sig);$/;"	p	file:	signature:(int sig)
status	include/server.h	/^    int status;			\/\/ to indicate if user online or offline$/;"	m	struct:_User	access:public
subject	include/server.h	/^    const char *subject;$/;"	m	struct:help_t	access:public
time_created	include/server.h	/^    time_t time_created;	\/\/ time channel was created$/;"	m	struct:_Channel	access:public
title	include/server.h	/^    const char *title;$/;"	m	struct:help_t	access:public
topic	include/server.h	/^    char *topic;		\/\/ channel topic$/;"	m	struct:_Channel	access:public
user_request_handlers	server.c	/^static UserRequestHandler user_request_handlers[] = {$/;"	v	file:
username	include/server.h	/^    char *username;		\/\/ unique identifier$/;"	m	struct:_User	access:public
